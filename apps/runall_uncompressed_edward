#!/usr/bin/python
#
# run all tests
#

import os
import sys
import signal
import time
import subprocess

def signal_handler(signal,frame):
  print "bye\n"
  sys.exit(0)
signal.signal(signal.SIGINT,signal_handler)

def shellGetOutput(str) :
  process = subprocess.Popen(str,shell=True,stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
  output, err = process.communicate()
  
  if (len(err) > 0):
      raise NameError(str+"\n"+output+err)
  return output

dataDir = "../inputs/"
applications = ["BFS","BC","Radii","Components"]
rapplications = ["PageRank"]
dapplications = ["decoderSpeed"]

testfiles = [("orkut", "3000")]

# below, you can change the range of number of processors; all of the current test results use 32 cores

processors = [32]

for app in dapplications:
  for testfile in testfiles :
    for p in processors :
      if p == 1:
        css = "export CILK_NWORKERS=1; ./"+app+' -rounds 5 -s '+dataDir+testfile[0]
      else:
        css = "export CILK_NWORKERS="+`p`+"; numactl -i all ./" + app + ' -rounds 5 -s '+ dataDir + testfile[0]
      print app+" "+`p` + " " + testfile[0] + " Ligra" 
      print shellGetOutput(css)
      sys.stdout.flush()

for app in rapplications:
  for testfile in testfiles :
    for p in processors :
      if p == 1:
        css = "export CILK_NWORKERS=1; ./"+app+' -rounds 5 -maxiters 1 -r '+testfile[1]+' '+dataDir+testfile[0]
      else:
        css = "export CILK_NWORKERS="+`p`+"; numactl -i all ./" + app + ' -maxiters 1 -rounds 5 -r '+testfile[1]+ ' ' + dataDir + testfile[0]
      print app+" "+`p` + " " + testfile[0] + " Ligra" 
      print shellGetOutput(css)
      sys.stdout.flush()

for app in applications:
  for testfile in testfiles :
    for p in processors :
      if p == 1:
        css = "export CILK_NWORKERS=1; ./"+app+' -rounds 5 -r '+testfile[1]+' '+dataDir+testfile[0]
      else:
        css = "export CILK_NWORKERS="+`p`+"; numactl -i all ./" + app + ' -rounds 5 -r '+testfile[1]+ ' ' + dataDir + testfile[0]
      print app+" "+`p` + " " + testfile[0] + " Ligra" 
      print shellGetOutput(css)
      sys.stdout.flush()
